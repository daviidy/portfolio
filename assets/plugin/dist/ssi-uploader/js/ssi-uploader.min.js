(function(h, x) {
  "object" === typeof module && module.exports ? module.exports = x(require("jquery")) : x(h.jQuery)
})(this, function(h) {
  function x(a, c, d) {
    a = h(a);
    (c = c || a.data("title")) || (c = a.attr("title"));
    if (c) {
      var b = h('<div class="ssi-fadeOut ssi-fade ssi-tooltipText">' + c + "</div>").appendTo(d.$element);
      a.one("mouseleave", function() {
        b.remove()
      });
      c = -16;
      a.hasClass("ssi-noPreviewSubMessage") && (c = 23);
      b.css({
        top: a.position().top - b.height() + c,
        left: a.position().left - b.width() / 2
      }).removeClass("ssi-fadeOut");
      return b
    }
  }
  var l = function(a, c) {
    this.options = c;
    this.$element = "";
    this.language = H[this.options.locale];
    this.uploadList = [];
    this.totalProgress = [];
    this.toUpload = [];
    this.imgNames = [];
    this.currentListLength = this.inProgress = this.pending = this.abortedWithError = this.aborted = this.successfulUpload = this.totalFilesLength = 0;
    this.inputName = "";
    this.init(a)
  };
  l.prototype.init = function(a) {
    h(a).addClass("ssi-uploadInput").after(this.$element = h('<div class="ssi-uploader">'));
    a = h('<span class="ssi-InputLabel"><button class="ssi-button success">' +
      this.language.chooseFiles + "</button></span>").append(a);
    var c = h('<button id="ssi-uploadBtn" class="ssi-button success ssi-hidden" ><span class="ssi-btnIn">' + this.language.upload + '&nbsp;</span><div id="ssi-up_loading" class="ssi-btnIn"></div></button>'),
      d = h('<button id="ssi-clearBtn" class="ssi-hidden ssi-button info" >' + this.language.clear + "</button>"),
      b = h('<button id="ssi-abortBtn" class="ssi-button error ssi-cancelAll ssi-hidden" ><span class="inBtn">' + this.language.abort + " </span></button>");
    this.options.inForm &&
      c.hide();
    this.$element.append(h('<div class="ssi-buttonWrapper">').append(a, b, c, d));
    if (this.options.preview) {
      var f = h('<div id="ssi-previewBox" class="ssi-uploadBox ssi-previewBox ' + (this.options.dropZone ? "ssi-dropZonePreview ssi-dropZone" : "") + '"><div id="ssi-info">' + (this.options.dropZone ? '<div id="ssi-DropZoneBack">' + this.language.drag + "</div>" : "") + '<div id="ssi-fileNumber" class="ssi-hidden">?</div></div></div>');
      this.$element.append(f)
    } else {
      this.$element.addClass("ssi-uploaderNP");
      var n = h('<table id="ssi-fileList" class="ssi-fileList"></table>'),
        g = h('<span class="ssi-namePreview"></span>'),
        m = h('<div id="ssi-uploadFiles" class="ssi-tooltip ssi-uploadFiles ' + (this.options.dropZone ? "ssi-dropZone" : "") + '"><div id="ssi-uploadProgressNoPreview" class="ssi-uploadProgressNoPreview"></div></div>').append(g),
        z = h('<div class="ssi-uploadDetails"></div>').append(n);
      f = h('<div class="ssi-uploadBoxWrapper ssi-uploadBox"></div>').append(m, z);
      this.$element.prepend(f)
    }
    var e = this,
      p = a.find(".ssi-uploadInput");
    this.inputName = p.attr("name") || "files";
    a.find("button").click(function(a) {
      a.preventDefault();
      p.trigger("click")
    });
    p.on("change", function() {
      e.toUploadFiles(this.files);
      e.options.inForm || p.val("")
    });
    e.options.dropZone && (f.on("drop", function(a) {
      a.preventDefault();
      f.removeClass("ssi-dragOver");
      e.toUploadFiles(a.originalEvent.dataTransfer.files)
    }), f.on("dragover", function(a) {
      a.preventDefault();
      f.addClass("ssi-dragOver");
      return !1
    }), f.on("dragleave", function(a) {
      a.preventDefault();
      f.removeClass("ssi-dragOver");
      return !1
    }));
    e.options.preview || m.click(function() {
      1 < e.currentListLength && z.toggleClass("ssi-uploadBoxOpened")
    });
    d.click(function(a) {
      a.preventDefault();
      e.clear()
    });
    f.on("mouseenter", ".ssi-statusLabel", function(a) {
      a = h(a.currentTarget);
      var b = a.attr("data-status");
      b && "" !== b && x(a, b, e)
    });
    f.on("mouseenter", "#ssi-fileNumber", function(a) {
      a = h(a.currentTarget);
      x(a, " " + e.language.pending + ": " + e.pending + " <br> " + e.language.completed + ": " + (e.successfulUpload + e.aborted + e.abortedWithError) + "<br> " + e.language.inProgress + ": " + e.inProgress, e)
    });
    f.on("click", ".ssi-removeBtn", function(a) {
      a.preventDefault();
      var b = h(a.currentTarget);
      a = b.data("delete");
      e.pending--;
      e.currentListLength--;
      1 > e.pending && e.$element.find("#ssi-fileNumber").addClass("ssi-hidden");
      0 === e.pending && c.prop("disabled", !0);
      e.options.preview ? b.parents("table.ssi-imgToUploadTable").remove() : (b = b.parents("tr.ssi-toUploadTr"), g.html(e.currentListLength + " files"), b.prev().remove(), b.remove(), 1 === e.currentListLength && C(e));
      e.toUpload[a] = null;
      e.imgNames[a] = null;
      0 === e.currentListLength && (e.options.dropZone || f.removeClass("ssi-uploadNoDropZone"), d.addClass("ssi-hidden"),
        c.addClass("ssi-hidden"))
    });
    f.on("click", ".ssi-abortUpload", function(a) {
      a.preventDefault();
      a = h(a.currentTarget).data("delete");
      e.abort(a)
    });
    c.click(function(a) {
      a.preventDefault();
      e.uploadFiles()
    });
    b.click(function(a) {
      a.preventDefault();
      e.abortAll()
    })
  };
  l.prototype.abortAll = function() {
    for (var a = 0; a < this.uploadList.length; a++) "object" === typeof this.uploadList[a] && this.abort(a)
  };
  l.prototype.toUploadFiles = function(a) {
    function c() {
      var a = d.imgNames.length;
      0 === a && (d.options.preview && (d.options.dropZone ||
        e.addClass("ssi-uploadNoDropZone")), g.removeClass("ssi-hidden"), m.removeClass("ssi-hidden"));
      m.prop("disabled", !0);
      d.toUpload[a] = k;
      var c = k.name,
        f = c.getExtension();
      d.imgNames[a] = c;
      if (d.options.preview) {
        var h = function(b) {
          return '<table class="ssi-imgToUploadTable ssi-pending"><tr><td class="ssi-upImgTd">' + b + '</td></tr><tr><td><div id="ssi-uploadProgress' + a + '" class="ssi-hidden ssi-uploadProgress"></div></td></tr><tr><td><button data-delete="' + a + '" class=" ssi-button error ssi-removeBtn"><span class="trash10 trash"></span></button></td></tr><tr><td>' +
            y(c, f, 15) + "</td></tr></table>"
        };
        if ("image" == k.type.split("/")[0]) {
          g.prop("disabled", !0);
          m.prop("disabled", !0);
          var r = new FileReader;
          r.onload = function() {
            n += h('<img class="ssi-imgToUpload" src=""/><i class="fa-spin fa fa-spinner fa-pulse"></i>');
            p[a] = r.result;
            b++;
            t === b ? (d.$element.find("#ssi-fileNumber").removeClass("ssi-hidden"), e.append(n), setTimeout(function() {
              u();
              g.prop("disabled", !1);
              m.prop("disabled", !1)
            }, 10), g.prop("disabled", !1), m.prop("disabled", !1), n = "", t = []) : t / 2 == Math.round(b) && (e.append(n),
              u(), n = "")
          };
          r.readAsDataURL(k)
        } else p[a] = null, e.append(h('<div class="document-item" href="test.mov" filetype="' + f + '"><span class = "fileCorner"></span></div>')), b++
      } else m.prop("disabled", !1), d.$element.find(".ssi-namePreview").html(0 === a ? y(c, f, 13) : d.currentListLength + 1 + " " + d.language.files), z.append('<tr class="ssi-space"><td></td></tr><tr class="ssi-toUploadTr ssi-pending"><td><div id="ssi-uploadProgress' + a + '" class="ssi-hidden ssi-uploadProgress ssi-uploadProgressNoPre"></div><span>' + y(c, f, 20) +
        '</span></td><td><a data-delete="' + a + '" class="ssi-button ssi-removeBtn  ssi-removeBtnNP"><span class="trash7 trash"></span></a></td></tr>');
      var u = function() {
        for (var a = 0; a < p.length; a++) null !== p[a] && (e.find("#ssi-uploadProgress" + a).parents("table.ssi-imgToUploadTable").find(".ssi-imgToUpload").attr("src", p[a]).next().remove(), p[a] = null);
        p = []
      }
    }
    if (!("number" === typeof this.options.maxNumberOfFiles && this.inProgress + this.pending >= this.options.maxNumberOfFiles)) {
      var d = this,
        b = 0,
        f, n = "",
        g = this.$element.find("#ssi-uploadBtn"),
        m = this.$element.find("#ssi-clearBtn"),
        z = this.$element.find("#ssi-fileList"),
        e = this.$element.find(".ssi-uploadBox"),
        p = [];
      0 === this.inProgress && 0 === this.pending && this.clear();
      var u = [],
        r = [],
        v = "",
        t, q = f = t = a.length;
      "number" === typeof this.options.maxNumberOfFiles && q > this.options.maxNumberOfFiles - (this.inProgress + this.pending) && (q = t = this.options.maxNumberOfFiles - (this.inProgress + this.pending));
      for (var l = 0; l < q; l++) {
        var k = a[l],
          w = k.name.getExtension(); - 1 === h.inArray(w, this.options.allowed) ? (f > q ? q++ : t--, -1 ===
          h.inArray(w, u) && u.push(w)) : (k.size * Math.pow(10, -6)).toFixed(2) > this.options.maxFileSize ? (f > q ? q++ : t--, r.push(y(k.name, w, 15))) : this.options.allowDuplicates || -1 === h.inArray(k.name, this.imgNames) ? (g.prop("disabled", !1), c(k), this.pending++, this.currentListLength++) : f > q ? q++ : t--
      }
      a = u.length;
      f = r.length;
      0 < a + f && (0 < a && (v = this.language.extError.replaceText(u.toString().replace(/,/g, ", "))), 0 < f && (v += this.language.sizeError.replaceText(r.toString().replace(/,/g, ", "), this.options.maxFileSize + "mb")), this.options.errorHandler.method(v,
        this.options.errorHandler.error))
    }
  };
  var D = function(a) {
      var c = a.$element.find(".ssi-completed");
      a.successfulUpload = 0;
      a.aborted = 0;
      a.abortedWithError = 0;
      a.options.preview || c.prev("tr").remove();
      c.remove()
    },
    E = function(a) {
      for (var c = a.$element.find(".ssi-pending"), d = a.imgNames.length, b = 0; b < d; b++) null === a.imgNames[b] && (a.toUpload.splice(b, 1), a.imgNames.splice(b, 1));
      a.toUpload.splice(-a.pending, a.pending);
      a.imgNames.splice(-a.pending, a.pending);
      a.pending = 0;
      a.options.preview || c.prev("tr").remove();
      c.remove()
    };
  l.prototype.clear = function(a) {
    switch (a) {
      case "pending":
        E(this);
        break;
      case "completed":
        D(this);
        break;
      default:
        E(this), D(this)
    }
    a = this.$element.find("#ssi-uploadBtn");
    var c = this.$element.find("#ssi-clearBtn");
    this.currentListLength = this.inProgress + this.successfulUpload + this.aborted + this.abortedWithError + this.pending;
    0 === this.inProgress && (this.totalProgress = []);
    0 === this.currentListLength && (c.addClass("ssi-hidden"), a.addClass("ssi-hidden"), this.$element.find("#ssi-fileNumber").addClass("ssi-hidden"), this.totalFilesLength =
      0, this.options.dropZone || this.$element.find(".ssi-uploadBox").removeClass("ssi-uploadNoDropZone"));
    c.prop("disabled", !0);
    a.prop("disabled", !0);
    this.options.preview || F(this)
  };
  var F = function(a) {
    1 < a.currentListLength ? a.$element.find(".ssi-namePreview").html(a.currentListLength + " files") : 1 === a.currentListLength ? C(a) : (a.$element.find(".ssi-uploadDetails").removeClass("ssi-uploadBoxOpened"), a.$element.find("#ssi-fileList").empty(), a.$element.find(".ssi-namePreview").empty())
  };
  l.prototype.appendFileToFormData =
    function(a) {
      var c = new FormData;
      c.append(this.inputName, a);
      h.each(this.options.data, function(a, b) {
        c.append(a, b)
      });
      return c
    };
  l.prototype.tryToTransform = function(a, c) {
    if ("function" === typeof this.options.transformFile) try {
      a = this.options.transformFile(a), a instanceof Promise ? a.then(function(a) {
        c(a)
      }) : c(a)
    } catch (d) {
      if (!this.options.ignoreCallbackErrors) return console.error("There is an error in transformFile"), console.error(d)
    } else c(a)
  };
  l.prototype.uploadFiles = function() {
    function a(n, g) {
      var m = "table.ssi-imgToUploadTable";
      b.options.preview || (m = "tr.ssi-toUploadTr");
      var l = b.$element.find("#ssi-uploadProgress" + g);
      l.removeClass("ssi-hidden").parents(m).removeClass("ssi-pending");
      m = h.extend({}, {
        xhr: function() {
          var a = new window.XMLHttpRequest;
          a.upload.addEventListener("progress", function(a) {
            if (a.lengthComputable) {
              a = a.loaded / a.total * 100;
              l && l.css({
                width: a + "%"
              });
              b.totalProgress[g] = a;
              a = b.totalProgress;
              for (var e = 0, d = 0; d < a.length; d++) "number" === typeof a[d] && (e += a[d]);
              a = e / (b.inProgress + b.successfulUpload);
              b.options.preview || b.$element.find("#ssi-uploadProgressNoPreview").removeClass("ssi-hidden").css({
                width: a +
                  "%"
              });
              c.find("#ssi-up_loading").html(Math.ceil(a) + "%")
            }
          }, !1);
          return a
        },
        async: !0,
        beforeSend: function(a, d) {
          b.uploadList[g] = a;
          console.log("TCL: ajaxLoopRequest -> thisS.toUpload", b.toUpload);
          console.log("TCL: ajaxLoopRequest -> ii", g);
          c.find("#ssi-up_loading").html('<i class="fa fa-spinner fa-pulse"></i>');
          var e = {
            name: b.toUpload[g].name,
            type: b.toUpload[g].type,
            size: (b.toUpload[g].size / 1024).toFixed(2)
          };
          if ("function" === typeof b.options.beforeEachUpload) try {
            var f = b.options.beforeEachUpload(e, a, d)
          } catch (v) {
            "Error" ==
            v.name ? b.abort(g, void 0, v.message) : b.options.ignoreCallbackErrors || (console.log("There is an error in beforeEachUpload callback. Filename:" + b.toUpload[g].name), console.log(v), b.abort(g, void 0, b.language.wentWrong));
            return
          }
          b.$element.find("input.ssi-uploadInput").trigger("beforeEachUpload.ssi-uploader", [e]);
          0 === a.status && "canceled" === a.statusText && ("undefined" === typeof f && (f = !1), b.abortedWithError++, b.abort(g, f))
        },
        type: "POST",
        method: "POST",
        data: n,
        cache: !1,
        contentType: !1,
        processData: !1,
        url: b.options.url,
        error: function(a, c) {
          if ("abort" !== c) {
            l.addClass("ssi-canceledProgressBar");
            var e = b.language.error;
            b.abortedWithError++;
            b.totalProgress.splice(g, 1);
            b.options.preview || (e = '<span class="exclamation7"></span>');
            A(b, g, "error", e, b.language.serverError);
            b.totalProgress[g] = "";
            b.inProgress--;
            d.prop("disabled", !1);
            if ("function" === typeof b.options.onEachUpload) try {
              b.options.onEachUpload({
                uploadStatus: "error",
                responseMsg: b.language.serverError,
                name: b.toUpload[g].name,
                size: (b.toUpload[g].size / 1024).toFixed(2),
                type: b.toUpload[g].type
              })
            } catch (r) {
              b.options.ignoreCallbackErrors || (console.log("There is an error in onEachUpload callback. File name:" + b.toUpload[g].name), console.log(r))
            }
            0 === b.inProgress && B(b);
            console.log(arguments);
            console.log(" Ajax error: " + c)
          }
        }
      }, b.options.ajaxOptions);
      h.ajax(m).done(function(a, c, f) {
        function e(a, c) {
          a ? (q = "success", n = b.language.success, p = "check", b.successfulUpload++) : (l.addClass("ssi-canceledProgressBar"), b.options.preview && (n = b.language.error), b.abortedWithError++);
          m = c
        }
        var n,
          m = "",
          q = "error",
          p = "exclamation";
        try {
          var k = h.parseJSON(a)
        } catch (w) {
          k = a
        }
        b.options.responseValidation ? (a = b.options.responseValidation, "object" === typeof a.validationKey && "validationKey" == a.resultKey ? k.hasOwnProperty(a.validationKey.success) ? e(!0, k[a.validationKey.success]) : e(!1, k[a.validationKey.error]) : k[a.validationKey] == a.success ? e(!0, k[a.resultKey]) : e(!1, k[a.resultKey])) : 200 == f.status ? e(!0, k) : e(!1, k);
        b.options.preview || (n = '<span class="' + p + '7"></span>');
        A(b, g, q, n, m);
        a = {
          uploadStatus: q,
          responseMsg: m,
          name: b.toUpload[g].name,
          size: (b.toUpload[g].size / 1024).toFixed(2),
          type: b.toUpload[g].type
        };
        if ("function" === typeof b.options.onEachUpload) try {
          b.options.onEachUpload(a, k)
        } catch (w) {
          console.log("There is an error in onEachUpload callback"), console.log(w)
        }
        b.$element.find("input.ssi-uploadInput").trigger("onEachUpload.ssi-uploader", [a]);
        b.inProgress--;
        d.prop("disabled", !1);
        0 === b.inProgress && B(b);
        b.uploadList[g] = "";
        b.toUpload[g] = "";
        b.imgNames[g] = ""
      });
      f = g;
      for (f++; !b.toUpload[f] && "undefined" !== typeof b.toUpload[f];) f++;
      f < b.toUpload.length && b.tryToTransform(b.toUpload[f], function(c) {
        c = b.appendFileToFormData(c);
        a(c, f)
      })
    }
    if (0 < this.pending) {
      if ("function" === typeof this.options.beforeUpload) try {
        this.options.beforeUpload()
      } catch (n) {
        if (!this.options.ignoreCallbackErrors) return console.log("There is an error in beforeUpload callback"), console.log(n)
      }
      this.$element.find("#ssi-abortBtn").removeClass("ssi-hidden");
      this.$element.find(".ssi-removeBtn").addClass("ssi-abortUpload").removeClass("ssi-removeBtn").children("span").removeClass("trash7 trash10 trash").addClass(this.options.preview ?
        "ban7w" : "ban7");
      var c = this.$element.find("#ssi-uploadBtn"),
        d = this.$element.find("#ssi-clearBtn");
      c.prop("disabled", !0);
      var b = this,
        f = this.totalFilesLength;
      0 === this.totalFilesLength || this.options.preview || F(this);
      this.inProgress += this.pending;
      this.totalFilesLength += this.pending;
      this.pending = 0;
      for (this.inProgress === this.currentListLength && d.prop("disabled", !0); !b.toUpload[f];) f++;
      b.tryToTransform(b.toUpload[f], function(c) {
        c = b.appendFileToFormData(c);
        a(c, f)
      })
    }
  };
  var A = function(a, c, d, b, f) {
      var h = "",
        g = "table.ssi-imgToUploadTable";
      a.options.preview || (h = "ssi-noPreviewSubMessage", g = "tr.ssi-toUploadTr", 1 === a.currentListLength && (a.errors = f));
      a = a.$element.find(".ssi-abortUpload[data-delete='" + c + "']");
      a.parents(g).addClass("ssi-completed");
      a.after(G(d, b, f, h)).remove()
    },
    G = function(a, c, d, b) {
      return '<span class="ssi-statusLabel ' + b + " " + a + '" data-status="' + d + '">' + c + "</span>"
    },
    C = function(a) {
      var c = a.$element.find("#ssi-fileList").find("span").html(),
        d = c.getExtension();
      a.$element.find(".ssi-uploadDetails").removeClass("ssi-uploadBoxOpened");
      a.$element.find(".ssi-namePreview").html(y(c, d, 15))
    };
  l.prototype.abort = function(a, c, d) {
    "undefined" === typeof c ? (this.uploadList[a].abort(), this.totalProgress[a] = "", c = d || "Aborted", this.aborted++) : "string" !== typeof c && (c = "");
    d = this.language.aborted;
    this.options.preview || (d = '<span class="ban7w"></span>');
    A(this, a, "error", d, c);
    this.$element.find("#ssi-uploadProgress" + a).removeClass("ssi-hidden").addClass("ssi-canceledProgressBar");
    this.toUpload[a] = void 0;
    this.uploadList[a] = void 0;
    this.imgNames[a] = void 0;
    this.$element.find("#ssi-clearBtn").prop("disabled", !1);
    this.inProgress--;
    0 === this.inProgress && B(this)
  };
  var B = function(a) {
    a.$element.find("#ssi-abortBtn").addClass("ssi-hidden");
    if (!a.options.preview) {
      var c = "error",
        d = "",
        b = "";
      0 < a.abortedWithError ? (d = 1 === a.totalFilesLength ? a.errors : a.language.someErrorsOccurred, b = '<span class="exclamation23"></span>') : 0 < a.aborted && 0 === a.successfulUpload ? (b = '<span class="ban23"></span>', d = a.language.aborted) : 0 < a.successfulUpload && (c = "success", b = '<span class="check23"></span>',
        d = a.language.sucUpload);
      a.$element.find(".ssi-namePreview").append(G(c, b, d, "ssi-noPreviewMessage"));
      a.$element.find("#ssi-uploadProgressNoPreview").removeAttr("styles").addClass("ssi-hidden")
    }
    if ("function" === typeof a.options.onUpload) try {
      a.options.onUpload(c)
    } catch (f) {
      a.options.ignoreCallbackErrors || (console.log("There is an error in onUpload callback"), console.log(f))
    }
    a.$element.find("input.ssi-uploadInput").trigger("onUpload.ssi-uploader", [c]);
    c = a.$element.find("#ssi-uploadBtn");
    a.$element.find("#ssi-clearBtn").prop("disabled",
      !1);
    c.prop("disabled", !1).find("#ssi-up_loading").empty();
    0 === a.pending && (c.addClass("ssi-hidden"), a.toUpload = [], a.imgNames = [], a.totalFilesLength = 0);
    a.uploadList = [];
    a.totalProgress = [];
    a.currentListLength = a.inProgress + a.successfulUpload + a.aborted + a.abortedWithError + a.pending;
    a.inProgress = 0
  };
  h.fn.ssi_uploader = function(a) {
    var c = h.extend(!0, {
      allowDuplicates: !1,
      url: "",
      data: {},
      locale: "en",
      preview: !0,
      dropZone: !0,
      maxNumberOfFiles: "",
      responseValidation: !1,
      ignoreCallbackErrors: !1,
      maxFileSize: 2,
      inForm: !1,
      ajaxOptions: {},
      onUpload: function() {},
      onEachUpload: function() {},
      beforeUpload: function() {},
      beforeEachUpload: function() {},
      allowed: "",
      errorHandler: {
        method: function(a) {
          alert(a)
        },
        success: "success",
        error: "error"
      }
    }, a);
    c.allowed = c.allowed || ["jpg", "jpeg", "png", "bmp", "gif"];
    return this.each(function() {
      var a = h(this);
      if (a.is('input[type="file"]')) {
        if (!a.data("ssi_upload")) {
          var b = new l(this, c);
          a.data("ssi_upload", b)
        }
      } else console.log("The targeted element is not file input.")
    })
  };
  String.prototype.replaceText = function() {
    for (var a =
        Array.apply(null, arguments), c = this, d = 0; d < a.length; d++) c = c.replace("$" + (d + 1), a[d]);
    return c
  };
  String.prototype.getExtension = function() {
    return this.split(".").pop().toLowerCase()
  };
  var y = function(a, c, d) {
      "undefined" === typeof c && (c = "");
      "undefined" === typeof d && (d = 10);
      if (!(4 > d)) {
        var b = c.length;
        return a.length - 2 > d ? (a = a.substring(0, d), a = a.substring(0, a.length - b), a + "..." + c) : a
      }
    },
    H = {
      en: {
        success: "Success",
        sucUpload: "Successful upload",
        chooseFiles: "Choose files",
        uploadFailed: "Upload failed",
        serverError: "Internal server error",
        error: "Error",
        abort: "Abort",
        aborted: "Aborted",
        files: "files",
        upload: "Upload",
        clear: "Clear",
        drag: "Drag n Drop",
        sizeError: "$1 exceed the size limit of $2",
        extError: "$1 file types are not supported",
        someErrorsOccurred: "Some errors occurred!",
        wentWrong: "Something went wrong!",
        pending: "Pending",
        completed: "Completed",
        inProgress: "In progress"
      },
      fr: {
        success: "Succ\u00e8s",
        sucUpload: "Envoi r\u00e9ussi",
        chooseFiles: "Envoyer par ici votre projet au format zip",
        uploadFailed: "Envoi \u00e9chou\u00e9",
        serverError: "Erreur interne du serveur",
        error: "Erreur",
        abort: "Annuler",
        aborted: "Annul\u00e9",
        files: "Fichiers",
        upload: "Envoyer",
        clear: "Effacer",
        drag: "Glisser d\u00e9poser",
        sizeError: "$1 exc\u00e8de la taille limite de $2",
        extError: "Types de fichier $1 non autoris\u00e9",
        someErrorsOccurred: "Une erreur a eu lieu !",
        wentWrong: "Une erreur a eu lieu !",
        pending: "\u0395n attendant",
        completed: "Termin\u00e9",
        inProgress: "En cours"
      },
    }
});
//# sourceMappingURL=ssi-uploader.min.js.map
